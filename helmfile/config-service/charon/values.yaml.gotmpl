{{- $applicationName := .Release.Name -}}
{{- $grpcPort := 9090 }}

replicaCount: 2

nodeSelector:
  mdb-service: "true"

podAnnotations:
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "{{ .Values.services.global.java.managementPort }}"
  prometheus.io/scrape: "true"

image:
  repository: ghcr.io/crashteamdev/{{ $applicationName }}
  tag: sha-d0916ec
  pullPolicy: IfNotPresent

{{ if .Values.services.global.registry.imagePullSecret }}
imagePullSecrets:
  - name: {{ .Values.services.global.registry.imagePullSecret }}
{{ end }}

env:
  - name: SPRING_REDIS_HOST
    value: {{ .Values.services.redis.endpoint }}
  - name: SPRING_REDIS_PASSWORD
    value: {{ .Values.services.redis.password }}
  - name: APP_INTEGRATION_CURRENCY-API_API-KEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_currency_apikey
  - name: FREEKASSA_APIKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_freekassa_apikey
  - name: FREEKASSA_SECRETWORDFIRST
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_freekassa_secretwordfirst
  - name: APP_INTEGRATION_LAVA_SECRETKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_lava_secretkey
  - name: APP_INTEGRATION_YOOKASSA_SECRETKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_yookassa_secretkey
  - name: FREEKASSA_SECRETWORDSECOND
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_freekassa_secretwordsecond
  - name: CLICK_SECRETKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_click_secret_key
  - name: SPRING_DATASOURCE_URL
    value: jdbc:postgresql://{{ .Values.services.postgres.endpoint }}:6432/charon?sslmode=require
  - name: SPRING_DATASOURCE_USERNAME
    value: {{ .Values.services.postgres.uniUser }}
  - name: SPRING_DATASOURCE_PASSWORD
    value: {{ .Values.services.postgres.uniPassword }}
  - name: APP_AWS-STREAM_ACCESSKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: aws_stream_access_key
  - name: APP_AWS-STREAM_SECRETKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: aws_stream_secret_key
  - name: APP_INTEGRATION_ENOT_SECRETKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: charon_enot_secretkey

configMap:
  data:
    application.yml: |
      {{- tpl (readFile "application.yml") . | nindent 6 }}

volumes:
  - name: config-volume
    configMap:
      name: {{ $applicationName }}
      defaultMode: 0755

volumeMounts:
  - name: config-volume
    mountPath: /opt/{{ $applicationName }}/config/application.yml
    subPath: application.yml
    readOnly: true

service:
  ports:
    - name: api
      port: {{ .Values.services.global.java.apiPort }}
    - name: management
      port: {{ .Values.services.global.java.managementPort }}
    - name: grpc
      port: {{ $grpcPort }}

livenessProbe:
  httpGet:
    path: /actuator/health
    port: management

readinessProbe:
  httpGet:
    path: /actuator/health
    port: management

resources:
  limits:
    memory: 512Mi
  requests:
    memory: 256Mi

metrics:
  serviceMonitor:
    enabled: {{ .Values.services.global.metrics.enabled }}
    namespace: {{ .Release.Namespace }}
    additionalLabels:
      release: prometheus
    endpoints:
      - port: "management"
        path: /actuator/prometheus
        scheme: http

ingress:
  enabled: true
  annotations:
{{- if .Values.services.ingress.tls.letsEncrypt.enabled }}
    cert-manager.io/cluster-issuer: {{ .Values.services.ingress.tls.letsEncrypt.issuer }}
{{- end }}
    kubernetes.io/ingress.class: {{ .Values.services.ingress.class | quote }}
    nginx.ingress.kubernetes.io/cors-allow-methods: "POST, GET, PUT"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "content-type,content-disposition,authorization,x-request-id"
    kubernetes.io/ingress.class: {{ .Values.services.ingress.class | quote }}
  hosts:
    - host: "api.marketdb.pro"
      paths:
        - /charon
{{- if .Values.services.ingress.tls.enabled }}
  tls:
  {{ if .Values.services.ingress.tls.letsEncrypt.enabled }}
    - secretName: api-{{ .Values.services.ingress.tls.secretName }}
  {{- else }}
    - secretName: {{ .Values.services.ingress.tls.secretName }}
  {{- end }}
      hosts:
        - "api.marketdb.pro"
{{- end }}
  servicePort: {{ .Values.services.global.java.apiPort }}

netPolicies:
  - filters:
    - port: 6379
      type: TCP
    name: redis
  - filters:
    - port: 8080
      type: TCP
    name: styx
