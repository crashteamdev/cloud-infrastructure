{{- $applicationName := .Release.Name -}}
{{- $grpcPort := 9090 }}

replicaCount: 1

nodeSelector:
  mdb-service: "true"

podAnnotations:
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "{{ .Values.services.global.java.managementPort }}"
  prometheus.io/scrape: "true"

image:
  repository: ghcr.io/crashteamdev/{{ $applicationName }}
  tag: sha-bf79d77
  pullPolicy: IfNotPresent

{{ if .Values.services.global.registry.imagePullSecret }}
imagePullSecrets:
  - name: {{ .Values.services.global.registry.imagePullSecret }}
{{ end }}

env:
  - name: JDK_JAVA_OPTIONS
    value: >-
      -Xmx1570M -Xss1M -XX:ReservedCodeCacheSize=240M -XX:MaxDirectMemorySize=100M -XX:MaxMetaspaceSize=221M
      -XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=dump.hprof -Djava.security.egd=/dev/zrandom
      -XX:+UseParallelGC
      -Dcom.amazonaws.sdk.disableCertChecking
  - name: CLICKHOUSE_HOST
    value: {{ .Values.services.clickhouse.host }}
  - name: CLICKHOUSE_PASSWORD
    value: {{ .Values.services.clickhouse.password }}
  - name: CLICKHOUSE_PORT
    value: "8443"
  - name: CLICKHOUSE_DB
    value: kazanex
  - name: MONGO_HOST
    value: {{ .Values.services.mongodb.host }}
  - name: MONGO_USER
    value: {{ .Values.services.mongodb.uniUser }}
  - name: MONGO_PASSWORD
    value: {{ .Values.services.mongodb.uniPassword }}
  - name: MONGO_DATABASE
    value: kazanex
  - name: MONGO_REPLICASET
    value: rs01
  - name: SPRING_REDIS_HOST
    value: {{ .Values.services.redis.endpoint }}
  - name: SPRING_REDIS_PASSWORD
    value: {{ .Values.services.redis.password }}
  - name: YOUKASSA_SHOPID
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_youkassa_shop
  - name: YOUKASSA_KEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_youkassa_key
  - name: FREEKASSA_APIKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_freekassa_apikey
  - name: FREEKASSA_SECRETWORDFIRST
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_freekassa_secretwordfirst
  - name: FREEKASSA_SECRETWORDSECOND
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_freekassa_secretwordsecond
  - name: AWS-STREAM_ACCESSKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_aws_stream_access_key
  - name: AWS-STREAM_SECRETKEY
    valueFrom:
      secretKeyRef:
        name: {{ .Release.Name }}
        key: ke_aws_stream_secret_key
  - name: AWS_CBOR_DISABLE
    value: '1'

configMap:
  data:
    application.yml: |
      {{- tpl (readFile "application.yml") . | nindent 6 }}

volumes:
  - name: config-volume
    configMap:
      name: {{ $applicationName }}
      defaultMode: 0755

volumeMounts:
  - name: config-volume
    mountPath: /opt/{{ $applicationName }}/config/application.yml
    subPath: application.yml
    readOnly: true

service:
  ports:
    - name: api
      port: {{ .Values.services.global.java.apiPort }}
    - name: management
      port: {{ .Values.services.global.java.managementPort }}
    - name: grpc
      port: {{ $grpcPort }}

livenessProbe:
  httpGet:
    path: /actuator/health
    port: management

readinessProbe:
  httpGet:
    path: /actuator/health
    port: management

resources:
  limits:
    memory: 2024Mi

metrics:
  serviceMonitor:
    enabled: {{ .Values.services.global.metrics.enabled }}
    namespace: {{ .Release.Namespace }}
    additionalLabels:
      release: prometheus
    endpoints:
      - port: "management"
        path: /actuator/prometheus
        scheme: http

{{ $domainWithNamespace := printf "%s.%s" .Release.Namespace .Values.services.ingress.rootDomain }}
{{ $ingressDomain := .Values.services.ingress.namespacedDomain | ternary $domainWithNamespace .Values.services.ingress.rootDomain }}

ingress:
  enabled: true
  annotations:
{{- if .Values.services.ingress.tls.letsEncrypt.enabled }}
    cert-manager.io/cluster-issuer: {{ .Values.services.ingress.tls.letsEncrypt.issuer }}
{{- end }}
    kubernetes.io/ingress.class: {{ .Values.services.ingress.class | quote }}
    nginx.ingress.kubernetes.io/cors-allow-methods: "POST, GET, PUT"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "content-type,content-disposition,authorization,x-request-id"
    kubernetes.io/ingress.class: {{ .Values.services.ingress.class | quote }}
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "3"
    nginx.ingress.kubernetes.io/limit-rpm: "150"
  hosts:
    - host: api.{{ $ingressDomain | default "crashteam.dev" }}
      paths:
        - /
    - host: "ke-api.marketdb.pro"
      paths:
        - /
{{- if .Values.services.ingress.tls.enabled }}
  tls:
  {{ if .Values.services.ingress.tls.letsEncrypt.enabled }}
    - secretName: api-{{ .Values.services.ingress.tls.secretName }}
  {{- else }}
    - secretName: {{ .Values.services.ingress.tls.secretName }}
  {{- end }}
      hosts:
        - api.{{ $ingressDomain | default "crashteam.dev" }}
        - "ke-api.marketdb.pro"
{{- end }}
  servicePort: {{ .Values.services.global.java.apiPort }}

netPolicies:
  - filters:
    - port: 27018
      type: TCP
    name: mongodb
  - filters:
    - port: 6379
      type: TCP
    name: redis
  - filters:
    - port: 8080
      type: TCP
    name: styx
