# -*- mode: yaml -*-
server:
  replicaCount: 1
  config:
    persistence:
      default:
        driver: "sql"
        sql:
          driver: "postgres12"
          host: {{ .Values.services.postgres.endpoint }}
          port: 6432
          database: temporal
          user: {{ .Values.services.postgres.uniUser }}
          password: {{ .Values.services.postgres.uniPassword }}
          maxConns: 20
          maxConnLifetime: "1h"
          tls:
            enabled: true
            enableHostVerification: false
      visibility:
        driver: "sql"
        sql:
          driver: "postgres12"
          host: {{ .Values.services.postgres.endpoint }}
          port: 6432
          database: temporal_visibility
          user: {{ .Values.services.postgres.uniUser }}
          password: {{ .Values.services.postgres.uniPassword }}
          maxConns: 20
          maxConnLifetime: "1h"
          tls:
            enabled: true
            enableHostVerification: false
  nodeSelector:
    mdb-service: "true"
  frontend:
    nodeSelector:
      mdb-service: "true"
  history:
    nodeSelector:
      mdb-service: "true"
  matching:
    nodeSelector:
      mdb-service: "true"
  worker:
    nodeSelector:
      mdb-service: "true"
admintools:
  nodeSelector:
    mdb-service: "true"
web:
  service:
    type: ClusterIP
    port: 8080
  nodeSelector:
    ingress: "true"
  ingress:
    enabled: true
    annotations:
  {{- if .Values.services.ingress.tls.letsEncrypt.enabled }}
      cert-manager.io/cluster-issuer: {{ .Values.services.ingress.tls.letsEncrypt.issuer }}
  {{- end }}
      kubernetes.io/ingress.class: {{ .Values.services.ingress.class | quote }}
      nginx.ingress.kubernetes.io/cors-allow-methods: "POST, GET, PUT"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: "content-type,content-disposition,authorization,x-request-id"
    hosts:
      - host: "temporal.marketdb.pro"
  {{- if .Values.services.ingress.tls.enabled }}
    tls:
    {{ if .Values.services.ingress.tls.letsEncrypt.enabled }}
      - secretName: temporal-{{ .Values.services.ingress.tls.secretName }}
    {{- else }}
      - secretName: {{ .Values.services.ingress.tls.secretName }}
    {{- end }}
      hosts:
        - "temporal.marketdb.pro"
  {{- end }}
elasticsearch:
  enabled: false
prometheus:
  enabled: false
grafana:
  enabled: false
cassandra:
  enabled: false
postgresql:
  enabled: false

schema:
  createDatabase:
    enabled: false
  setup:
    enabled: false
  update:
    enabled: false
